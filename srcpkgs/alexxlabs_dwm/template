# metapackage for setup fully customized desktop 'alexxlabs_dwm'
#
# TODO: for later readme
## https://maxice8.github.io/7-using-tmplgen/
# https://maxice8.github.io/11-updating-tmplgen/
# XBPS_DISTDIR for this util exported from /etc/env
#xbps-install -y tmplgen
#
# inspired by: https://github.com/siduck/chadwm
#
pkgname=alexxlabs_dwm
version=6.3
revision=1
#
# https://github.com/alexxlabs/void-packages/blob/master/Manual.md#about-the-many-types-of-depends-variables
#
# The target package can also depend on other packages for libraries to link against or header files.
# These packages should be listed in makedepends and will match the target architecture,
# regardless of the architecture of the build machine. Typically,
# makedepends will contain mainly -devel packages.
makedepends="libXinerama-devel libXft-devel freetype-devel imlib2-devel"
#
# a package may require certain dependencies *at runtime*, without which it is unusable.
# These dependencies, when they aren't detected automatically by XBPS, should be listed in:
# *** we include here all the packages, that we use to customize our desktop ***
# - xrandr:     Primitive command line interface to RandR extension
# - xbacklight: Adjust backlight brightness using RandR extension
# - xmodmap:    утилита для изменения раскладки клавиш клавиатуры и мыши в Xorg
# - xrdb:       X server resource database utility
# - xclip:		Command line interface to the X11 clipboard
# - maim:		Desktop screenshot utility
# - dash:       dependencie of opt/void-packages/srcpkgs/alexxlabs_dwm/files/scripts/bar.sh
# - rofi:       Window switcher, run dialog and dmenu replacement
# TODO: - rofi-pass - Rofi frontend for pass
# - alexxlabs_eww: eww widgets for use configs (files/eww)
# - alexxlabs_dwm_fonts: needed fonts, installed as separate package
depends="xrandr xbacklight xmodmap xrdb xclip maim dash rofi alexxlabs_dwm_fonts alexxlabs_eww imlib2"
#
#
short_desc="Dynamic window manager for X"
maintainer="siduck <siduck@tutanota.com>"
license="MIT"
homepage="https://github.com/siduck/chadwm.git"
#
# The directory name where the package sources are extracted,
# by default set to ${pkgname}-${version}. If the top level directory
# of a package's distfile is different from the default, wrksrc must
# be set to the *top level directory name inside the archive*.
wrksrc="dwm-${version}"
#
# Enable it to create the ${wrksrc} directory.
# Required if a package contains multiple distfiles.
create_wrksrc=yes
#
# A directory relative to ${wrksrc} that will be used when building the package.
#build_wrksrc="dwm-${version}"
#
#distfiles="
#	https://dl.suckless.org/dwm/dwm-${version}.tar.gz
#	https://dwm.suckless.org/patches/gaplessgrid/gaplessgrid.c"
#
#  A list of filenames that should not be extracted in the extract phase.
# This must match the *basename* of any url defined in ${distfiles}.
#skip_extraction="
#	gaplessgrid.c"
#
#checksum="
#	badaa028529b1fba1fd7f9a84f3b64f31190466c858011b53e2f7b70c6a3078d
#	0d4aade6b87df8df1af07629143dc5b758af9cf5f93eb6bab68161c74af1ef44"
#
# ---------------------------------------------------------------------------
# https://github.com/alexxlabs/void-packages/blob/master/Manual.md#functions
# ---------------------------------------------------------------------------
#
# instead of downloading sources from internet (see distfiles above)
# copy sources to builddir locally
# from files/dwm - my custom sources with needed patches
do_fetch() {
    mkdir -p ${wrksrc}
    cd ${wrksrc}
	cp -R ${FILESDIR}/dwm/* ${wrksrc}/
}
# if defined and distfiles is not set, use it to extract the required sources.
# Current working directory for do_extract: wrksrc
#do_extract() {}
#
# Current working directory for post_extract: wrksrc
#post_extract() {
#	# copy_to_build_dir
#	cp -R ${FILESDIR}/dwm/themes ${wrksrc}/${build_wrksrc}/
#	cp ${FILESDIR}/dwm/fibonacci.c ${wrksrc}/${build_wrksrc}/
#	cp ${FILESDIR}/dwm/movestack.c ${wrksrc}/${build_wrksrc}/
#	cp ${FILESDIR}/dwm/transient.c ${wrksrc}/${build_wrksrc}/
#	cp ${FILESDIR}/dwm/vanitygaps.c ${wrksrc}/${build_wrksrc}/
#	cp ${FILESDIR}/dwm/functions.h ${wrksrc}/${build_wrksrc}/
	#
	# downloaded from distfiles url
#	cp ${XBPS_SRCDISTDIR}/${pkgname}-${version}/gaplessgrid.c ${wrksrc}/${build_wrksrc}/
	#
	# finally, copy config with all customizations
#	[ -e ${FILESDIR}/dwm/config.def.h ] && cp ${FILESDIR}/dwm/config.def.h ${wrksrc}/${build_wrksrc}/
#}
#
# https://re00.home.blog/2019/07/28/add-patches-to-xbps-packages/
# Create a folder named patches in the package directory (in the same directory where your template file is).
# Put your .patch file inside the folder. Now open your template file and include this line after the checksum line:
#patch_args="-Np1"
#
do_build() {
	sed -i "/CFLAGS/s|\${CPPFLAGS}|& $CFLAGS|g" config.mk
	sed -i "/LDFLAGS/s|\-s|$LDFLAGS|g" config.mk
	make CC=$CC INCS="-I. -I${XBPS_CROSS_BASE}/usr/include/freetype2" LIBS="-lX11 -lXinerama -lXft -lfontconfig"
}
#
# A list of entries defining directories and permissions to be created at *install time*
# Each entry should be space separated, and will itself contain spaces.
# User and group and mode are required on every line, even if they are 755 root root.
# By convention, there is only one entry of dir perms user group per line.
#make_dirs="
#	/usr/share/fonts    0755 root root
#	/etc/X11/xinit/scripts 0755 root root"
#
# FILESDIR Full path to the files package directory, i.e srcpkgs/foo/files.
# 	The files directory can be used to store additional files to be installed as part of the source package.
#
# https://github.com/alexxlabs/void-packages/blob/master/Manual.md#global-functions
#
do_install() {
	make PREFIX=/usr DESTDIR=$DESTDIR install
	vinstall ${FILESDIR}/dwm/dwm.desktop 644 usr/share/xsessions
	#
	# The system-wide xinitrc is under /etc/X11/xinit/xinitrc.
	# It can be overridden by ~/.xinitrc
	vinstall ${FILESDIR}/xinitrc 644 etc/X11/xinit
	vinstall ${FILESDIR}/.Xresources 644 etc/X11/xinit
}
#
post_install() {
	# Copies recursively all files in pattern to targetdir in the pkg $DESTDIR.
	# vcopy() vcopy <pattern> <targetdir>
	#
	# Creates a directory in the pkg $DESTDIR. The 2nd optional argument sets the mode of the directory.
	# vmkdir() vmkdir <directory> [<mode>]
	#
	vmkdir etc/X11/xinit/scripts
	vcopy ${FILESDIR}/scripts/* etc/X11/xinit/scripts
}
# =================================================================================================
# ======================================= Subpackages =============================================
# =================================================================================================
# To create additional subpackages the template must define a new function with this naming: <subpkgname>_package():
# foo-devel is a subpkg
# TODO: setup rofi, eww etc. as subpackages !!!
#foo-devel_package() {
#	short_desc+=" - development files"
#	depends="${sourcepkg}>=${version}_${revision}"
#	pkg_install() {
#		vmove usr/include
#		vmove "usr/lib/*.a"
#		vmove "usr/lib/*.so"
#		vmove usr/lib/pkgconfig
#	}
#}
# All subpackages need an additional symlink to the main pkg, otherwise dependencies requiring those packages won't find its template Example:
# /srcpkgs
#  |- foo <- directory (main pkg)
#  |  |- template
#  |- foo-devel <- symlink to `foo`
#
# The main package should specify all required build dependencies to be able to build all subpackages
# defined in the template.
#
# An important point of subpackages is that they are processed after the main package has run its install phase.
# The pkg_install() function specified on them commonly is used to move files from the main package destdir
# to the subpackage destdir.
#
# The helper functions vinstall, vmkdir, vcopy and vmove are just wrappers that simplify the process of creating,
# copying and moving files/directories between the main package destdir ($DESTDIR)
# to the subpackage destdir ($PKGDESTDIR).
#
# Subpackages are processed always in alphabetical order; To force a custom order,
# the subpackages variable can be declared with the wanted order.
#
# A white space separated list of subpackages (matching foo_package()) to override the guessed list.
# Only use this if a specific order of subpackages is required, otherwise the default would work in most cases.
#subpackages=""